{"version":3,"sources":["images/Front.jpg","Message.js","firebase.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","Info","src","Front","alt","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","height","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","React","useState","modalStyle","open","setOpen","openSignIn","setOpenSignIn","email","setEmail","password","setPassword","user","setUser","messageInput","setMessageInput","messages","setMessages","setUsername","clearInputs","useEffect","unsubscribe","onAuthStateChanged","authUser","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","Modal","onClose","style","Input","placeholder","type","value","onChange","e","target","Button","onClick","event","preventDefault","createUserWithEmailAndPassword","then","updateProfile","displayName","catch","error","alert","signInWithEmailAndPassword","signOut","FormControl","IconButton","disabled","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6625dd99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Front.6ba0a601.jpg\";","/* import React, { forwardRef } from \"react\";\r\nimport \"./Message.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nconst Message = forwardRef(({ username, message }, ref) => {\r\n  const [{ user }] = useStateValue();\r\n  return (\r\n    <div ref={ref} className={`message__card ${user && \"message__user\"}`}>\r\n      <Card className={user ? \"message__userCard\" : \"message__guestCard\"}>\r\n        <CardContent>\r\n          <Typography\r\n            className=\"message__text\"\r\n            color=\"white\"\r\n            variant=\"h5\"\r\n            component=\"h4\"\r\n          >\r\n            {!user && `${message.username || \"Unknown User\"}: `}\r\n            {message.message}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\nexport default Message; */\r\nimport React, { forwardRef } from \"react\";\r\nimport \"./Message.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nconst Message = forwardRef(({ username, message }, ref) => {\r\n  const isUser = username === message.username;\r\n  return (\r\n    <div ref={ref} className={`message__card ${isUser && \"message__user\"}`}>\r\n      <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n        <CardContent>\r\n          <Typography\r\n            className=\"message__text\"\r\n            color=\"white\"\r\n            variant=\"h5\"\r\n            component=\"h4\"\r\n          >\r\n            {!isUser && `${message.username || \"Unknown User\"}: `}\r\n            {message.message}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCqeytAdgbXqraM0etbqvmcMO92zlsjxSc\",\r\n  authDomain: \"fbmessenger-clone-fd3be.firebaseapp.com\",\r\n  databaseURL: \"https://fbmessenger-clone-fd3be.firebaseio.com\",\r\n  projectId: \"fbmessenger-clone-fd3be\",\r\n  storageBucket: \"fbmessenger-clone-fd3be.appspot.com\",\r\n  messagingSenderId: \"301100356108\",\r\n  appId: \"1:301100356108:web:d2df60eecc7cd4e6ed5429\",\r\n  measurementId: \"G-77KXXF5XF1\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { db, auth };\r\n","import React from \"react\";\r\nimport \"./Info.css\";\r\nimport Front from \"./images/Front.jpg\";\r\n\r\nfunction Info() {\r\n  return (\r\n    <div className=\"info\">\r\n      <div className=\"info__container\">\r\n        <h2>\r\n          Welcome To <strong>Snappy Chat</strong>\r\n        </h2>\r\n        <img src={Front} alt=\"front__picture\" />\r\n        <div className=\"info__text\">\r\n          <span>⭐⭐⭐⭐⭐⭐⭐</span>\r\n          <h1>Nathaniel Odazie Miles</h1>\r\n          <p>...part of my ReactJs journey</p>\r\n          <marquee>\r\n            Unknown User Can Not Have Access: sign in or sign up.\r\n          </marquee>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { FormControl, Input, IconButton, Button } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport { db, auth } from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport \"./Header.css\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Info from \"./Info\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%`,\n  };\n}\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"fixed\",\n    width: 280,\n    height: 350,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[2],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(\"\");\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState(\"\");\n\n  //reset all inputs to default\n  const clearInputs = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n  //authentication listener\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        setUser(authUser);\n      } else {\n        setUser();\n        clearInputs();\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  // registeration\n  const signUp = (event) => {\n    event.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n    clearInputs();\n  };\n\n  // Login\n  const signIn = (event) => {\n    event.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n    clearInputs();\n  };\n\n  //setting the messages\n  useEffect(() => {\n    const unsubscribe = db\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\n        );\n      });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  //sending message function\n  const sendMessage = (e) => {\n    e.preventDefault();\n    if (messageInput !== \"\") {\n      db.collection(\"messages\").add({\n        message: messageInput,\n        username: user.displayName,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n      setMessageInput(\"\");\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      {/* signup modal */}\n      <div className=\"app__modal\">\n        <Modal open={open} onClose={() => setOpen(false)}>\n          <div style={modalStyle} className={classes.paper}>\n            <form className=\"app__signup\">\n              <center>\n                <img\n                  className=\"app__headerImage\"\n                  src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"\n                  alt=\"\"\n                />\n              </center>\n\n              <Input\n                className=\"app__signupInput\"\n                placeholder=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <Input\n                className=\"app__signupInput\"\n                placeholder=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <Input\n                className=\"app__signupInput\"\n                placeholder=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <Button type=\"submit\" onClick={signUp}>\n                Sign Up\n              </Button>\n            </form>\n          </div>\n        </Modal>\n\n        {/* sign in modal */}\n\n        <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n          <div style={modalStyle} className={classes.paper}>\n            <form className=\"app__signin\">\n              <center>\n                <img\n                  className=\"app__headerImage\"\n                  src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"\n                  alt=\"\"\n                />\n              </center>\n              <Input\n                className=\"app__signinInput\"\n                placeholder=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <Input\n                className=\"app__signinInput\"\n                placeholder=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n\n              <Button type=\"submit\" onClick={signIn}>\n                Sign In\n              </Button>\n            </form>\n          </div>\n        </Modal>\n      </div>\n\n      <div className=\"header\">\n        {user ? (\n          <div className=\"header__logo\">\n            <img\n              src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"\n              alt=\"\"\n            />\n            <h2>\n              Hello <strong>{user.displayName}</strong>, Welcome To Snappy Chat\n            </h2>\n          </div>\n        ) : (\n          <></>\n        )}\n        {user ? (\n          <Button id=\"logout__button\" onClick={() => auth.signOut()}>\n            Logout\n          </Button>\n        ) : (\n          <div className=\"app__loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n\n      {/* footer for sending messages */}\n      <div className=\"app\">\n        {user ? (\n          <form className=\"app__form\">\n            <FormControl className=\"app__formControl\">\n              <Input\n                className=\"app__input\"\n                placeholder=\"Enter a message....\"\n                value={messageInput}\n                onChange={(e) => setMessageInput(e.target.value)}\n                type=\"text\"\n              />\n              <IconButton\n                className=\"app__iconButton\"\n                disabled={!messageInput}\n                type=\"submit\"\n                onClick={sendMessage}\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                <SendIcon />\n              </IconButton>\n            </FormControl>\n          </form>\n        ) : (\n          <></>\n        )}\n        {user ? (\n          <FlipMove>\n            {messages.map(({ id, message }) => (\n              <Message key={id} username={user.displayName} message={message} />\n            ))}\n          </FlipMove>\n        ) : (\n          <Info />\n        )}\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}